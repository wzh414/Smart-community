<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>community-management</artifactId>
        <groupId>com.example</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>web</artifactId>



    <dependencies>
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>web-data</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.example</groupId>
            <artifactId>security</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.example</groupId>
            <artifactId>api-data</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 -->
                    <mainClass>com.example.communitymanagement.WebApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 构建Docker镜像 -->
            <!-- start::dockerfile插件 -->
            <!-- https://mvnrepository.com/artifact/com.spotify/dockerfile-maven-plugin -->
            <!-- https://github.com/spotify/dockerfile-maven -->
            <!-- https://blog.csdn.net/liubingyu12345/article/details/79015966 -->
            <!-- https://www.jianshu.com/p/acb1f062a925 -->
            <!-- 源码所在机器，即客户机配置一条环境变量DOCKER_HOST=tcp://ip:2375。ip替换成远程docker服务器的机器ip，这样客户机就能远程访问Docker环境了。-->
            <!-- 例子： https://github.com/spotify/dockerfile-maven/blob/master/plugin/src/it/advanced/backend/pom.xml -->
            <!--
                 在本地计算机执行打包脚本，连接远程docker守护进程进行打包。
                 执行脚本前，必须在本地电脑 docker login -u dgsai@vip.qq.com registry.cn-shenzhen.aliyuncs.com
                 输入密码。
             -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.13</version>
                <executions>
                    <execution>
                        <id>build-and-tag-latest</id>
                        <phase>none</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-version</id>
                        <phase>none</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <tag>${project.version}</tag>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-latest</id>
                        <phase>none</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <tag>latest</tag>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-version</id>
                        <phase>none</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <tag>${project.version}</tag>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <skip>${dockerfile.skip}</skip>
                    <repository>${docker.aliyun.registryUrl}/${docker.image.prefix}/${project.artifactId}</repository>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>